@page "/login"
@attribute [RenderModeInteractiveWebAssembly]
@inject NavigationManager navigationManager

<PageTitle>Iniciar Sesión</PageTitle>


<!--CSS-->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">


<style>

    .login,
    .image {
        min-height: 100vh;
    }

    .bg-image {
        background-image: url('./bg2.jpg');
        background-size: cover;
        background-position: center center;
    }

</style>


@code {


    string errorVisible = "h";



}


<div class="container-fluid bg-white">
    <div class="row no-gutter">


        <!-- Contenido -->
        <div class="col-md-6 bg-white">
            <div class="login d-flex align-items-center py-5">

                <!-- Demo content-->
                <div class="container">
                    <div class="row">


                        @if (isLogin)
                        {
                            <center>
                                <CircleLoader/>
                                <h5 class="mt-2 gilroy-bold text-sm text-gray-600">@LogMessage</h5>


                                @if (cancelShow)
                                {
                                    <label @onclick="CancelHi" class="hover:text-indigo-500 text-sm">Cancelar</label>
                                }

                            </center>
                        }
                        else
                        {

                            <div class="relative z-10 flex flex-1 flex-col bg-white px-4 py-10 sm:justify-center md:flex-none md:px-28">
                                <div class="mx-auto w-full max-w-md sm:px-4 md:w-96 md:max-w-sm md:px-0">
                                    <div class="flex flex-col">

                                        <!--Nombre-->
                                        <div class="flex flex-row items-center">
                                            <img class="self-center" src="./chat.png" style="height:30px; width: 30px"/>
                                            <label class="text-xl self-center ml-3 gilroy-bold">
                                                LIN
                                                <span class="text-transparent bg-clip-text bg-gradient-to-r to-indigo-500 from-blue-500"> Allo</span>

                                            </label>
                                        </div>

                                        <!--Mensjae de cuenta-->
                                        <div class="mt-10">

                                            @if (IsWithKey)
                                            {
                                                <h2 class="text-lg font-semibold text-gray-900">Iniciar sesión con Passkey</h2>
                                            }
                                            else
                                            {
                                                <h2 class="text-lg font-semibold text-gray-900">Iniciar sesión en tu cuenta</h2>
                                            }

                                            <p class="mt-2 text-sm text-gray-700">
                                                No tienes una cuenta?<!-- --> <a style="text-decoration: none !important;" class="font-medium text-indigo-600 hover:text-indigo-800" href="/register">Registrate</a> <!-- -->para iniciar a disfrutar
                                            </p>
                                        </div>

                                    </div>

                                    <div class="mt-6 grid grid-cols-1 gap-4">


                                        <!--Usuario-->
                                        <div class="">
                                            <label for="email" class="mb-2 block text-sm font-medium text-gray-700">
                                                Usuario
                                            </label>
                                            <input @onkeypress="HideError" @bind="                                User" type="text" autocomplete="off" required=""
                                                   class="block w-full appearance-none rounded-md border border-gray-200 bg-gray-50 px-3 py-2 text-gray-900 placeholder-gray-400 focus:border-indigo-500 focus:bg-white focus:outline-none focus:ring-indigo-500 sm:text-sm">
                                        </div>


                                        @if (!IsWithKey)
                                        {
                                            <!--Contraseña-->
                                            <div class="">
                                                <label class="mb-2 block text-sm font-medium text-gray-700">Contraseña</label>
                                                <input @onkeypress="HideError" @bind="                                                Password" type="password" autocomplete="off"
                                                       class="block w-full appearance-none rounded-md border border-gray-200 bg-gray-50 px-3 py-2 text-gray-900 placeholder-gray-400 focus:border-indigo-500 focus:bg-white focus:outline-none focus:ring-indigo-500 sm:text-sm">
                                            </div>



                                        }


                                        <center class="@errorVisible" style="margin-bottom: -10px;">
                                            <label class="text-red-500 gilroy-bold text-sm">@ErrorMessage</label>
                                        </center>

                                        <!--Boton-->
                                        <div class="flex flex-row mt-1">


                                            <button @onclick="Start" class="group inline-flex items-center justify-center rounded-full py-2 px-4 text-sm font-semibold focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 bg-indigo-600 text-white hover:text-slate-100 hover:bg-indigo-500 active:bg-indigo-800 active:text-indigo-100 focus-visible:outline-indigo-600 w-full">
                                                <span>Iniciar <span aria-hidden="true">→</span></span>
                                            </button>

                                            <button @onclick="GotoLoginKey" href="/loginkey" type="button" class="text-white bg-indigo-600 w-20 hover:bg-indigo-800 focus:ring-4 focus:outline-none focus:ring-indigo-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center ml-2  flex justify-center">

                                                @if (IsWithKey)
                                                {
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
                                                    </svg>
                                                }
                                                else
                                                {
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="" viewBox="0 0 16 16">
                                                        <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm7 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0z"/>
                                                    </svg>
                                                }


                                            </button>


                                        </div>


                                        <div class="flex flex-row justify-end items-end">
                                            <label @onclick="GoToForget" class="text-sm text-indigo-600 hover:text-indigo-800">Olvide mi contraseña</label>
                                        </div>

                                    </div>
                                </div>
                            </div>

                        }

                    </div>
                </div>

            </div>
        </div>


        <!-- Imagen -->
        <div class="col-md-6 d-none d-md-flex bg-image hidden sm:contents lg:relative lg:block lg:flex-1"/>


    </div>
</div>


@code {



    protected override void OnInitialized()
    {
        if (Access.Communication.Session.IsOpen)
        {
            navigationManager.NavigateTo("/");
        }
        base.OnInitialized();
    }



    /// <summary>
    /// Hace visisbles los controles
    /// </summary>
    void ShowControls()
    {
        isLogin = false;
        StateHasChanged();
    }


    /// <summary>
    /// Oculta los controles
    /// </summary>
    void HideControls()
    {
        isLogin = true;
        StateHasChanged();
    }


    /// <summary>
    /// Oculta los errores
    /// </summary>
    void HideError()
    {
        errorVisible = "h";
        StateHasChanged();
    }



    /// <summary>
    /// Oculta los errores
    /// </summary>
    void GoToForget()
    {
        navigationManager.NavigateTo("/login/forgetpassword");
    }


    /// <summary>
    /// Muestra un mensaje
    /// </summary>
    void ShowError(string message)
    {
        errorVisible = "v";
        ErrorMessage = message;
        StateHasChanged();
    }



    /// <summary>
    /// Muestra un mensaje
    /// </summary>
    void GotoLoginKey()
    {
        IsWithKey = !IsWithKey;
        StateHasChanged();
    }



    /// <summary>
    /// Inicia sesion
    /// </summary>
    async void Start()
    {

        if (IsWithKey)
        {
            StartKey();
            return;
        }

        HideControls();
        HideError();

    // Sin informacion
        if (User.Length <= 0 || Password.Length <= 0)
        {
            ShowControls();
            ShowError("Completa todos los campos");
            return;
        }

    // Inicio de sesion
        var login = await Access.Communication.Session.LoginWith(User, Password);

        if (login.Response == Responses.Success)
        {
    //Online.StaticHub.LoadHub();
            navigationManager.NavigateTo("/");
            return;

        }
        else if (login.Response == Responses.InvalidPassword)
        {
            ShowControls();
            ShowError("La contraseña es incorrecta");
        }
        else if (login.Response == Responses.NotExistAccount)
        {
            ShowControls();
            ShowError($"No existe el usuario {User}");
        }
        else if (login.Response == Responses.UnauthorizedByOrg)
        {
            ShowControls();
            ShowError($"Tu organización no permite que accedas a esta app");
        }
        else
        {
            ShowControls();
            ShowError("Inténtalo mas tarde");
        }


    }








    Access.Auth.Hubs.PassKeyHub? hub;

    /// <summary>
    /// Inicia sesion
    /// </summary>
    async void StartKey()
    {
        cancelShow = false;
        LogMessage = "Revisa tu dispositivo";
        HideControls();
        HideError();

    // Sin informacion
        if (User.Length <= 0)
        {
            ShowControls();
            ShowError("Usuario requerido");
            return;
        }


    // Suscribir al Hub
        hub = new(User, "Q333Q");

        await hub.Suscribe();
        var reive = false;

        hub.OnRecieveResponse += async (o, e) =>
        {
            await InvokeAsync(async () =>
            {
                reive = true;

                switch (e.Status)
                {
                    case PassKeyStatus.Success:
                        break;

                    case PassKeyStatus.Rejected:
                        ShowControls();
                        ShowError("Passkey rechazada");
                        return;

                    case PassKeyStatus.Expired:
                        ShowControls();
                        ShowError("La sesión expiro");
                        return;

                    case PassKeyStatus.BlockedByOrg:
                        ShowControls();
                        ShowError("Tu organización no permite que inicies en esta aplicación.");
                        return;

                    default:
                        ShowControls();
                        ShowError("Hubo un error en Passkey");
                        return;
                }


                cancelShow = false;
                LogMessage = "Iniciando Sesión";
                StateHasChanged();

    // Inicio de sesion
                var login = await Access.Communication.Session.LoginWith(e.Token);

                if (login.Response == Responses.Success)
                {
    //Online.StaticHub.LoadHub();
                    navigationManager.NavigateTo("/");
                    return;

                }
                else if (login.Response == Responses.InvalidPassword)
                {
                    ShowControls();
                    ShowError("La sesion de passkey ha expirado");
                }
                else if (login.Response == Responses.NotExistAccount)
                {
                    ShowControls();
                    ShowError($"No existe el usuario {User}");
                }
                else
                {
                    ShowControls();
                    ShowError("Intentalo de nuevo mas tarde");
                }
            });

    // Hace el inicio



        };

        var intent = new PassKeyModel()
        {
            User = User
        };

        hub.SendIntent(intent);

        await Task.Delay(3000);
        cancelShow = true;
        StateHasChanged();

        await Task.Delay(60000);

        if (reive)
            return;

        hub.Disconet();
        hub = null;
        ShowControls();
        ShowError("La sesion de passkey ha expirado");

    }




    void CancelHi()
    {
        hub?.Disconet();
        hub = null;

        ShowControls();
        return;
    }


}