@inject IJSRuntime jsRuntime
@attribute [RenderModeInteractiveWebAssembly]

@code {


    /// <summary>
    /// Nombre del grupo.
    /// </summary>
    [Parameter]
    public string Name { get; set; } = string.Empty;



    /// <summary>
    /// Id del grupo.
    /// </summary>
    [Parameter]
    public int ConversationId { get; set; }



    /// <summary>
    /// Id único del elemento.
    /// </summary>
    private string UniqueId { get; init; } = Guid.NewGuid().ToString();



    /// <summary>
    /// Lista de modelos de miembros.
    /// </summary>
    private List<Types.Auth.Abstracts.SessionModel<MemberChatModel>> MemberModels { get; set; } = new();



    /// <summary>
    /// Lista de controles de miembros.
    /// </summary>
    private List<Member> MemberControls { get; set; } = new();



    /// <summary>
    /// Control de un integrante.
    /// </summary>
    private Member MemberControl
    {
        set => MemberControls.Add(value);
    }



    /// <summary>
    /// Esta cargado.
    /// </summary>
    private bool IsLoad { get; set; }


}


<!-- Componente -->
<div id="drawer-@UniqueId" class="fixed top-0 right-0 z-40 h-screen p-4 overflow-y-auto transition-transform translate-x-full card-blur">

    <!--Información básica-->
    <div class="flex items-center justify-center w-full">

        <h5 id="drawer-right-label" class="self-center font-bold">
            @Name
        </h5>

        <!--Botón cerrar-->
        <button id="close-drawer-@UniqueId" type="button" data-drawer-hide="drawer-right-example" aria-controls="drawer-right-example" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 right-2.5 inline-flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white">
            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
            </svg>
            <span class="sr-only">Close menu</span>
        </button>

    </div>


    <div class="flex items-center justify-center w-full">
        <label class="text-xs text-gray-500">Integrantes</label>
    </div>

    <!--Botones de acción-->
    <div class="flex justify-center items-center mt-2 gap-2">
        <img class="h-5 w-5 hover:opacity-25" src="./plus.png"/>
        <img class="h-5 w-5 hover:opacity-25" src="./trash-bin.png"/>
        <img class="h-5 w-5 hover:opacity-25" src="./write.png"/>
    </div>

    <!--Renderizado de controles-->
    <div>
        @foreach (var e in MemberModels ?? new List<Types.Auth.Abstracts.SessionModel<MemberChatModel>>())
        {
            <Member e="@e" @ref=MemberControl/>
        }
    </div>


</div>


@functions
{

    /// <summary>
    /// Abrir el elemento.
    /// </summary>
    public async void Show()
    {
        await jsRuntime.InvokeVoidAsync("ShowDrawer", $"drawer-{UniqueId}", $"close-drawer-{UniqueId}");
        StateHasChanged();
    }



    /// <summary>
    /// Evento después de renderizar.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    // Si no esta cargado.
        if (!IsLoad)
        {
    // Respuesta de la API.
            var result = await Access.Communication.Controllers.Conversations.MembersInfo(ConversationId, Access.Communication.Session.Instance.AccountToken);

    // Modelos a la UI.
            MemberModels = result.Models;
            IsLoad = true;
            StateHasChanged();
        }

    // Evento base.
        await base.OnAfterRenderAsync(firstRender);
    }


}