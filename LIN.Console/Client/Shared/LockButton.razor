

<style>

    .lock-checkbox {
        position: relative;
        display: inline-block;
        width: 20px;
        height: 20px;
        margin-right: 10px;
    }

        .lock-checkbox input[type="checkbox"] {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .lock-icon {
       
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        height: 20px;
        transition: all 0.3s;
        cursor: pointer;
    }
    .no
    {
        fill: #E26156;
    }

    .yes
    {
        fill: #22C55E;
    }


</style>


@code {


    [Parameter]
    public Action<bool> Click { get; set; }


    [Parameter]
    public EventCallback<MouseEventArgs> OnActive { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnDesactive { get; set; }


    [Parameter]
    public string state { get; set; } = "yes";

}





<label @onclick="Submit" class="lock-checkbox @state">
    <input id="lock" type="checkbox">
    <span class="lock-icon">

        <svg width="21" height="21" viewBox="0 0 24 24">
            <path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6z"></path>
        </svg>

    </span>
</label>


@code{

    async void Submit()
    {

        if (state == "yes")
        {
            state = "no";
            await OnDesactive.InvokeAsync();
        }
        else
        {
            state = "yes";
            await OnActive.InvokeAsync();
        }

        base.StateHasChanged();

    }

}
