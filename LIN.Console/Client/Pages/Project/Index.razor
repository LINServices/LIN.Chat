@page "/projects/{ID}"

@inject IJSRuntime JSRuntime
@inject NavigationManager nav

<NavBar />

<!-- Parametros -->
@code
{

    [Parameter]
    public string ID { get; set; } = "0";


    


    protected override void OnInitialized()
    {
       

        if (!int.TryParse(ID, out _))
        {
            ID = "0";
        }

        base.OnInitialized();
    
    }
}

<!-- Variables y Api -->
@code
{

    /// <summary>
    /// Lista de llaves
    /// </summary>
    private List<ApiKeyDataModel> Llaves { get; set; } = new();


    /// <summary>
    /// Proyecto
    /// </summary>
    private ProjectDataModel Proyecto { get; set; } = new();


    /// <summary>
    /// La informacion esta cargada
    /// </summary>
    private bool IsInfoLoaded { get; set; } = false;


    /// <summary>
    /// Las llaved estan cargada
    /// </summary>
    private bool IsKeyLoaded { get; set; } = false;


    /// <summary>
    /// Respuesta de API (Proyecto)
    /// </summary>
   Responses? Response { get; set; } = null;

}














@code {


    /// <summary>
    /// Metodo de inicio
    /// </summary>
    protected override async Task OnInitializedAsync()
    {

        // Obtiene las api Keys
        await LoadInfo();

        // Obtiene las api Keys
        await LoadKeys();

        // base
        await base.OnInitializedAsync();

    }




    private async Task LoadInfo()
    {
        IsInfoLoaded = false;

        // Obtiene los dispositivos
        var result = await LIN.Access.Developer.Controllers.Project.ReadOne(int.Parse(ID), LIN.Access.Developer.Session.Instance.Token);

        Response = result.Response;
        IsInfoLoaded = true;

        if (result.Response == Responses.Success)
        {
            Proyecto = result.Model;
            base.StateHasChanged();
        }

    }


    /// <summary>
    /// Carga la lista de llaves
    /// </summary>
    private async Task LoadKeys()
    {

        IsKeyLoaded = false;

        var token = LIN.Access.Developer.Session.Instance.Token;

        // Obtiene los dispositivos
        var result = await LIN.Access.Developer.Controllers.ApiKey.ReadAll(int.Parse(ID),token );
       
        IsKeyLoaded = true;
        if (result.Response == Responses.Success)
        {
            Llaves = result.Models;
            base.StateHasChanged();
        }

    }


}



@if (Response == null)
{

    <div class="flex items-center justify-center h-screen">
        <CircleLoader />
    </div>

    return;
}

<!--Respuesta del -->
@switch (Response)
{

    case Responses.Undefined:
        {
            <Alert Message="No tienes permiso o no existe este proyecto." Class="error" Svg="2" />
            return;
        }

    case Responses.Unauthorized:
        {
            <Alert Message="No tienes permiso." Class="error" Svg="2" />
            return;
        }

    case Responses.Success:
        {
            break;
        }

    default:
        {
            <Alert Message="No existe este proyecto." Class="error" Svg="2" />
            return;
        }

}




<div class="layoutMain">


    <div class="flex">
        <h1>Vista de proyecto </h1>
        <h1 class="gilroy-bold ml-1">@Proyecto.Nombre</h1>
    </div>



    @if((Proyecto.IPs.Count == 0) || Llaves.Count == 0)
    {
        <div class="mt-5">
            <div class="flex flex-row items-center p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-100" role="alert">
                <span class="flex w-3 h-3 bg-red-600 rounded-full mr-2"></span><span class="gilroy-bold mr-1">Inaccesible</span> <span>Tu proyecto actualmente es inaccesible.</span>
            </div>
        </div>
    }
    else
    {
        <div class="mt-5">
            <div class="flex flex-row items-center p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-100" role="alert">
                <span class="flex w-3 h-3 bg-green-600 rounded-full mr-2"></span><span class="gilroy-bold mr-1">Funcionado</span> <span>Tu proyecto esta corriendo.</span>
            </div>
        </div>
    }

    

    <div class="flex">
        <img style="width: 100px; height: 100px" class="rounded items-center" src="./img/login3.jpg" alt="Default avatar">

        <div class="ml-3 items-center">

            <div class="flex flex-col">
                <label style="font-size: 20px" class="gilroy-bold">@Proyecto.Nombre</label>
                <label style="font-size: 10px">Proyecto descripcion</label>
            </div>


          

        </div>

    </div>


    <div class="flex items-center gap-1 mt-5">

        <style>
            .txt
            {
                font-size: 12px;
            }
        </style>

        <button @onclick="OpenDrawer" id="btn1" type="button" class="gilroy-bold text-white bg-[#050708] hover:bg-[#050708]/90 focus:ring-4 focus:outline-none focus:ring-[#050708]/50 rounded-lg px-5 py-2.5 text-center inline-flex items-center mr-1 mb-2 w-48 justify-center txt">
            <svg style="margin-right: 6px" xmlns="http://www.w3.org/2000/svg" width="15" height="15" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z" />
            </svg>
            Nueva llave
        </button>

        <button @onclick="OpenIPDrawer" id="btn1" type="button" class="gilroy-bold text-white bg-[#050708] hover:bg-[#050708]/90 focus:ring-4 focus:outline-none focus:ring-[#050708]/50 rounded-lg px-5 py-2.5 text-center inline-flex items-center mr-2 mb-2 w-48 justify-center txt">
            <svg style="margin-right: 6px" width="15" height="15" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M0 0h48v48H0z" fill="none"></path> <g id="Shopicon"> <path d="M14.037,22c0.239-6.944,1.708-13.047,3.885-17.053C10.46,7.326,4.9,13.96,4.101,22H14.037z"></path> <path d="M14.037,26H4.101C4.9,34.04,10.46,40.674,17.922,43.053C15.745,39.047,14.276,32.944,14.037,26z"></path> <path d="M33.963,22h9.936C43.1,13.96,37.54,7.326,30.078,4.947C32.255,8.953,33.724,15.056,33.963,22z"></path> <path d="M33.963,26c-0.239,6.944-1.708,13.047-3.885,17.053C37.54,40.674,43.1,34.04,43.899,26H33.963z"></path> <path d="M29.958,26H18.042C18.466,37.815,22.539,44,24,44S29.534,37.815,29.958,26z"></path> <path d="M24,4c-1.461,0-5.534,6.185-5.958,18h11.916C29.534,10.185,25.461,4,24,4z"></path> </g> </g></svg>
            Nueva regla Firewall
        </button>

    </div>


    @if (Proyecto.IPs.Count == 0)
    {
        <div style="box-shadow: rgba(0, 0, 0, 0.02) 0px 4px 12px;" class="flex items-center justify-center mt-7 bg-white h-20 w-full rounded-lg">
            <img class="h-6 w-6" src="./img/firewall.png" />
            <label class="gilroy-bold ml-2">No tienes ninguna regla Firewall.</label>
        </div>
    }

    else
    {


        <div style="margin-left: 2px" class="relative sm:rounded-lg mt-5 mb-5">

            <label style="font-size: 18px;" class="gilroy-bold mb-3 mt-3">Reglas del Firewall</label>

            @foreach (var ip in Proyecto.IPs)
            {
                <IPComponent OnDelete="LoadInfo" IP="ip" />
            }

        </div>

        <p style="margin-left: 3px;" class="text-xs text-gray-500">Ver la lista de <a href="/projects/@ID/firewallblock" class="text-blue-600 hover:underline">accesos rechazados</a>.</p>


    }



    @if (!IsKeyLoaded)
    {
        <div style="box-shadow: rgba(0, 0, 0, 0.02) 0px 4px 12px;" class="flex items-center justify-center mt-5 bg-white h-20 w-full rounded-lg">
            <CircleLoader />
        </div>
    }

    else
    {

        @if (Llaves.Count == 0)
        {
            <div style="box-shadow: rgba(0, 0, 0, 0.02) 0px 4px 12px;" class="flex items-center justify-center mt-5 bg-white h-20 w-full rounded-lg">
                <img class="h-6 w-6" src="./img/key.png" />
                <label class="gilroy-bold ml-2">No hay ninguna llave asociada.</label>
            </div>
        }

        else
        {

            <div style="margin-left: 2px" class="relative sm:rounded-lg mt-5 mb-5">

                <label style="font-size: 18px;" class="gilroy-bold mb-3 mt-3">Llaves</label>

                @foreach (var key in Llaves)
                {
                    <KeyComponent OnDelete="LoadKeys" key="key"/>
                }

            </div>

        }


    }


</div>



<DrawerKey ProjectID="@int.Parse(ID)" OnSuccessCreate="OnSucces" />

<DrawerIP ID="@int.Parse(ID)" OnSuccessCreate="OnSuccesip" OnErrorCreate="OnE" />


<!-- Funciones -->
@code
{

    async void OnE(string message)
    {
        ModalError.Show(message);

    }


    async void OnSuccesip()
    {

        // Vuelve a cargar las llaves
        await LoadInfo();

        // Regresca la UI
        base.StateHasChanged();
    }


    async void OnSucces()
    {

        // Vuelve a cargar las llaves
        await LoadKeys();

        // Regresca la UI
        base.StateHasChanged();
    }



    private async Task OpenDrawer()
    {

        await JSRuntime.InvokeAsync<object>("ShowDrawer", "drawerKey", "btnClose", "btnClose1");

        base.StateHasChanged();

    }

    private async Task OpenIPDrawer()
    {

        await JSRuntime.InvokeAsync<object>("ShowDrawer", "drawerIP", "btnCloseIP", "btnCloseIP1");

        base.StateHasChanged();

    }

}