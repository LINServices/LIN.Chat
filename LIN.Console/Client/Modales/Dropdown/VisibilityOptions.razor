
@code{

    public static VisibilityOptions Context;


    [Parameter]
    public string Name { get; set; } = "";

    [Parameter]
    public Action OnSuccess { get; set; }


    public dynamic Bindo { get; set; }

    public static AccountVisibility Default = AccountVisibility.Visible;

    public static async Task Show(string name, string with, AccountVisibility genero)
    {
        Default = genero;
        Context.StateHasChanged();
        await App.JS.InvokeVoidAsync("OpenDropDown", name, with);
    }



}
@{
    Context = this;
}





<!-- Dropdown menu -->
<div id="@Name" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-60 dark:bg-gray-700 dark:divide-gray-600" data-popper-reference-hidden="" data-popper-escaped="" data-popper-placement="top" style="position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(522.5px, 6119.5px, 0px);">
    <ul class="p-3 space-y-1 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownHelperRadioButton">
        <li>
            <div class="flex p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-600" @onclick="()=>HandleRadioClick(AccountVisibility.Visible)">
                <div class="flex items-center h-5">
                   
                    @if (Default == AccountVisibility.Visible)
                    {
                        <input id="helper-radio-4" checked name="helper-radio" type="radio" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    }
                    else
                    {
                        <input id="helper-radio-4" name="helper-radio" type="radio" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    }    
                    
                </div>
                <div class="ml-2 text-sm">
                    <label for="helper-radio-4" class="font-medium text-gray-900 dark:text-gray-300">
                        <div>Visible</div>
                        <p id="helper-radio-text-4" class="text-xs font-normal text-gray-500 dark:text-gray-300">Información publica es accesible a otros usuarios.</p>
                    </label>
                </div>
            </div>
        </li>
        <li>
            <div class="flex p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-600" @onclick="()=>HandleRadioClick(AccountVisibility.Hidden)">
                <div class="flex items-center h-5">

                    @if (Default == AccountVisibility.Hidden)
                    {
                        <input id="helper-radio-4" checked name="helper-radio" type="radio" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    }
                    else
                    {
                        <input id="helper-radio-4" name="helper-radio" type="radio" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    }

                </div>
                <div class="ml-2 text-sm">
                    <label for="helper-radio-5" class="font-medium text-gray-900 dark:text-gray-300">
                        <div>Oculto</div>
                        <p id="helper-radio-text-5" class="text-xs font-normal text-gray-500 dark:text-gray-300">Tu información es privada.</p>
                    </label>
                </div>
            </div>
        </li>
        
    </ul>
</div>

@code{


    private async void HandleRadioClick(AccountVisibility vis)
    {

        if (Default == vis)
        {
            return;
        }
        Default = vis;
        base.StateHasChanged();
        var response =  await LIN.Access.Auth.Controllers.Account.UpdateVisibility(LIN.Access.Developer.Session.Instance.AccountToken, vis);


        if (response.Response == Responses.Success)
        {
            LIN.Access.Developer.Session.Instance.Account.Visibilidad = vis;
            OnSuccess?.Invoke();

        }
   

    }

                    }