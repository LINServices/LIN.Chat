@page "/"
@inject NavigationManager nav


@if (!LIN.Access.Communication.Session.IsOpen)
{
    nav.NavigateTo("/login");
}



@code {

    class A
    {
        public bool IsLoad {get;set;}
    }

    Dictionary<int, (LIN.Access.Communication.Hubs.ChatHub, MemberChatModel, A)> Chats = new();


    Shared.ChatSection ChatPage { get; set; }















    int Me = 0;
    int Other = 0;
    string Alias = "";


    List<MemberChatModel> ConversaciónModels = new();



    protected override async Task OnInitializedAsync()
    {

        var s = LIN.Access.Communication.Session.Instance;
        var token = LIN.Access.Communication.Session.Instance.Token;
        var o = await LIN.Access.Communication.Controllers.Conversations.ReadAll(token);


        if (o.Response != Responses.Success)
            return; 

        ConversaciónModels = o.Models;

        var hub = new LIN.Access.Communication.Hubs.ChatHub();
        await hub.Suscribe();
        await hub.ConnectMe(LIN.Access.Communication.Session.Instance.Informacion);

        foreach (var e in ConversaciónModels)
        {

            e.Profile = LIN.Access.Communication.Session.Instance.Informacion;
            e.Conversation.Mensajes ??= new();

            hub.JoinGroup(e.Conversation.ID.ToString(), (MessageModel message) =>
            {

                e.Conversation.Mensajes.Add(message);
                if (ChatPage?.Iam.Conversation.ID == e.Conversation.ID)
                {
                    ChatPage?.Render();
                    ChatPage?.ScrollToBottom();
                }
                   

            });


            hub.SuscribeToMe(e.Conversation.ID.ToString(), (q) =>
            {

                if (ChatPage?.Iam?.Conversation?.ID == e.Conversation.ID)
                    return;

                var c =  ComponentRefs.Where(T => T.Member.Conversation.ID == e.Conversation.ID).FirstOrDefault();

                if (c != null)
                {
                    c.IsNew = true;
                    c.Render();
                }
            });

            Chats.Add(e.Conversation.ID, (hub, e, new() { IsLoad= false }));
        }


        await base.OnInitializedAsync();
    }









    LIN.Access.Communication.Hubs.ChatHub ActualHub { get; set; }
    MemberChatModel Member { get; set; }



    async void Select(MemberChatModel c)
    {

        var info = Chats.Where(T => T.Key == c.Conversation.ID).FirstOrDefault();

        ActualHub = info.Value.Item1;
        Member = info.Value.Item2;

        if (!info.Value.Item3.IsLoad)
        {
            var oldMessage = await LIN.Access.Communication.Controllers.Messages.ReadAll(Member.Conversation.ID);

            Member.Conversation.Mensajes.AddRange(oldMessage.Models);
            info.Value.Item3.IsLoad = true;

        }

        Seccion = 1;
        base.StateHasChanged();

    }

    private string Img64
    {
        get
        {
            return Convert.ToBase64String(LIN.Access.Communication.Session.Instance.Account.Perfil);
        }
    }


    int Seccion = 0;


    List<LIN.Chat.Client.Shared.Control> ComponentRefs = new ();

    LIN.Chat.Client.Shared.Control ComponentRef
    {
        set { ComponentRefs.Add(value); }
    }

}


<div>
    <div class="w-full h-32" style="background-color: #F8F7FB"></div>

    <div class="w-screen" style="margin-top: -128px;">
        <div class="h-screen">
            <div class="flex flex-row h-full gap-1">

                <!-- Left -->
                <div class="w-full lg:w-1/3 flex @(Seccion != 0 ? "hidden lg:flex":"")   flex-col">

                    <!-- Header -->
                    <div class="px-5 pt-3 pb-1 flex flex-row justify-between items-center border-r" style="background-color: #F8F7FB">
                        <div class="flex items-center">

                            <button type="button" class="flex bg-white text-sm rounded-full focus:ring-4 focus:ring-gray-300" id="user-menu-button">
                                <span class="sr-only">Open</span>
                                <img class="w-8 h-8 p-1 rounded-full ring-2 ring-gray-300" src="data:image/png;base64,@Img64">
                            </button>

                            <div class="flex flex-col">
                                <label class="ml-3 text-sm gilroy-bold">@LIN.Access.Communication.Session.Instance.Account.Nombre</label>
                                <label class="ml-3 text-xs gilroy" style="margin-top:-3px">@LIN.Access.Communication.Session.Instance.Informacion.Alias</label>
                            </div>
                            
                        </div>

                        <div class="flex justify-center items-center">
                            <div>
                               <img class="h-5 w-5" src="./add.png"/>
                            </div>
                            
                        </div>
                    </div>

                    <!-- Contacts -->
                    <div class="flex-1 overflow-auto border-r" style="background-color: #F8F7FB">

                        <div class="px-5 mt-4">

                            <label class="text-xl gilroy-bold text-gray-800">Conversaciones</label>

                            <!--Componente: Chat Selector-->
                            @foreach (var member in ConversaciónModels)
                            {
                               <LIN.Chat.Client.Shared.Control Member="member" ActualChat="()=>ChatPage?.Iam?.Conversation" Hub="()=>ActualHub" @ref="ComponentRef" OnClick="Select" />
                            }
                        </div>
                    </div>

                </div>

                <!-- Right -->
                <div class="w-full @(Seccion != 1 ? "hidden lg:flex":"") lg:w-2/3 flex flex-col" style="background-color: #F8F7FB">

                    @if (ActualHub != null && Member != null)
                    {
                        <LIN.Chat.Client.Shared.ChatSection @ref="ChatPage" Iam="Member" Hub="ActualHub" OnBackPress="()=>{Seccion =0; base.StateHasChanged();}" />
                    }


                </div>

            </div>
        </div>
    </div>
</div>

















