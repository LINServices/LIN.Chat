
@code{

    [Parameter]
    public MemberChatModel? e { get; set; } = null;

    public bool isOnline = false;




    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }


    public void Con()
    {
         Confirm(e.Profile.ID);
    }

  

    
}


<div @onclick="()=>Confirm(e.Profile.ID)" class="flex shadow hover:shadow-indigo-200 bg-white rounded-lg w-full mt-3">
    <div class="flex flex-col p-3 w-full ml-2">
        <label class="text-sm font-bold">@e.Profile.Alias</label>

         @if (e.Rol == Types.Communication.Enumerations.MemberRoles.Admin)
        {
            <label class="text-xs">Administrador</label>
        }
        else
        {
            <label class="text-xs">Integrante</label>
        }

    </div>
    @if (isOnline)
    {
        <div class="flex justify-end items-center mr-3">
            <span class="flex justify-center items-center bg-green-100 text-green-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300 w-28">
                <span class="w-2 h-2 mr-1 bg-green-500 rounded-full"></span>
                Conectado
            </span>
        </div>
    }
    else
    {
        <div class="flex justify-end items-center mr-3">
            <span class="inline-flex justify-center items-center bg-red-100 text-red-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300 w-28">
                <span class="w-2 h-2 mr-1 bg-red-500 rounded-full"></span>
                Desconectado
            </span>
        </div>
    }

</div>


@code {


    async void Confirm(int id)
    {
        var x = await LIN.Access.Communication.Controllers.Conversations.IsOnline(id);
        isOnline = x.Model;
        StateHasChanged();
    }
}